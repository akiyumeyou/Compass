import React from 'react';
import { useQuery } from 'convex/react';
import { api } from '../../convex/_generated/api';
import './SimulationHistory.css';

interface Props {
  onLoadSimulation?: (simulationId: string) => void;
}

const SimulationHistory: React.FC<Props> = ({ onLoadSimulation }) => {
  const simulations = useQuery(api.simulations.getSimulations, { includePublic: true });
  const stats = useQuery(api.simulations.getSimulationStats, {});

  const formatDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 4) return '#4CAF50';
    if (confidence >= 3.5) return '#FF9800';
    if (confidence >= 3) return '#2196F3';
    return '#9E9E9E';
  };

  if (!simulations || !stats) {
    return (
      <div className="history-loading">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>履歴を読み込み中...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="simulation-history">
      <div className="history-header">
        <h2>シミュレーション履歴</h2>
        
        {stats && (
          <div className="stats-summary">
            <div className="stat-item">
              <span className="stat-number">{stats.totalCount}</span>
              <span className="stat-label">総シミュレーション数</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{stats.avgConfidence.toFixed(1)}</span>
              <span className="stat-label">平均信頼度</span>
            </div>
            <div className="stat-item">
              <span className="stat-number">{stats.recentCount}</span>
              <span className="stat-label">今月の実行数</span>
            </div>
          </div>
        )}
      </div>

      <div className="simulations-grid">
        {simulations.length === 0 ? (
          <div className="empty-state">
            <h3>まだシミュレーションがありません</h3>
            <p>新しいシミュレーションを作成して、未来の自分を予測してみましょう。</p>
          </div>
        ) : (
          simulations.map((simulation) => (
            <div key={simulation._id} className="simulation-card">
              <div className="card-header">
                <div className="simulation-date">
                  {formatDate(simulation.createdAt)}
                </div>
                <div
                  className="confidence-badge"
                  style={{ backgroundColor: getConfidenceColor(simulation.result.confidenceScore) }}
                >
                  信頼度: {simulation.result.confidenceScore.toFixed(1)}
                </div>
              </div>

              <div className="card-content">
                <h3>{simulation.result.targetYear}年の予測</h3>
                <p className="summary">{simulation.result.overallSummary}</p>

                <div className="simulation-metadata">
                  <div className="meta-item">
                    <span className="meta-label">年齢:</span>
                    <span>{simulation.lifeContext.age}歳</span>
                  </div>
                  <div className="meta-item">
                    <span className="meta-label">ステージ:</span>
                    <span>{getLifeStageLabel(simulation.lifeContext.lifeStage)}</span>
                  </div>
                  <div className="meta-item">
                    <span className="meta-label">活動数:</span>
                    <span>{simulation.currentActivities.length}個</span>
                  </div>
                </div>

                <div className="projection-highlights">
                  {Object.entries(simulation.result.projections).map(([key, projection]) => (
                    <div key={key} className="projection-preview">
                      <span className="projection-category">{getCategoryLabel(key)}:</span>
                      <div
                        className="confidence-indicator"
                        style={{ backgroundColor: getConfidenceColor(projection.confidence) }}
                      ></div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="card-actions">
                {onLoadSimulation && (
                  <button
                    className="load-button"
                    onClick={() => onLoadSimulation(simulation._id)}
                  >
                    詳細を見る
                  </button>
                )}
                <div className="visibility-indicator">
                  {simulation.isPublic ? '🌐 公開' : '🔒 非公開'}
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {simulations.length > 0 && (
        <div className="history-footer">
          <p>過去のシミュレーション結果を参考に、現在の状況や目標を見直してみましょう。</p>
        </div>
      )}
    </div>
  );
};

const getLifeStageLabel = (stage: string): string => {
  const labels: Record<string, string> = {
    student: '学生',
    early_career: 'キャリア初期',
    mid_career: 'キャリア中期',
    senior_career: 'キャリア後期',
    retirement: '退職後'
  };
  return labels[stage] || stage;
};

const getCategoryLabel = (category: string): string => {
  const labels: Record<string, string> = {
    career: 'キャリア',
    relationships: '人間関係',
    personal_growth: '個人成長',
    lifestyle: 'ライフスタイル',
    achievements: '達成・成果'
  };
  return labels[category] || category;
};

export default SimulationHistory;